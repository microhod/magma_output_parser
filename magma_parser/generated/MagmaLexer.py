# Generated from grammar/MagmaLexer.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,27,196,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,
        1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,
        1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,
        96,8,15,1,16,1,16,1,16,5,16,101,8,16,10,16,12,16,104,9,16,3,16,106,
        8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,5,18,118,
        8,18,10,18,12,18,121,9,18,1,18,1,18,4,18,125,8,18,11,18,12,18,126,
        1,18,1,18,1,18,4,18,132,8,18,11,18,12,18,133,3,18,136,8,18,1,19,
        1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,
        1,23,1,23,1,23,1,24,4,24,169,8,24,11,24,12,24,170,1,24,1,24,4,24,
        175,8,24,11,24,12,24,176,4,24,179,8,24,11,24,12,24,180,1,25,1,25,
        5,25,185,8,25,10,25,12,25,188,9,25,1,26,4,26,191,8,26,11,26,12,26,
        192,1,26,1,26,0,0,27,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
        21,43,22,45,23,47,24,49,25,51,26,53,27,1,0,6,1,0,49,57,1,0,48,57,
        3,0,48,57,65,90,97,122,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,
        95,97,122,3,0,9,9,13,13,32,32,207,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
        0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
        0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
        0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
        0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
        0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,1,55,1,0,
        0,0,3,57,1,0,0,0,5,59,1,0,0,0,7,61,1,0,0,0,9,63,1,0,0,0,11,65,1,
        0,0,0,13,67,1,0,0,0,15,69,1,0,0,0,17,71,1,0,0,0,19,73,1,0,0,0,21,
        75,1,0,0,0,23,78,1,0,0,0,25,80,1,0,0,0,27,82,1,0,0,0,29,84,1,0,0,
        0,31,95,1,0,0,0,33,105,1,0,0,0,35,107,1,0,0,0,37,135,1,0,0,0,39,
        137,1,0,0,0,41,141,1,0,0,0,43,151,1,0,0,0,45,156,1,0,0,0,47,161,
        1,0,0,0,49,168,1,0,0,0,51,182,1,0,0,0,53,190,1,0,0,0,55,56,5,60,
        0,0,56,2,1,0,0,0,57,58,5,62,0,0,58,4,1,0,0,0,59,60,5,40,0,0,60,6,
        1,0,0,0,61,62,5,41,0,0,62,8,1,0,0,0,63,64,5,91,0,0,64,10,1,0,0,0,
        65,66,5,93,0,0,66,12,1,0,0,0,67,68,5,58,0,0,68,14,1,0,0,0,69,70,
        5,44,0,0,70,16,1,0,0,0,71,72,5,124,0,0,72,18,1,0,0,0,73,74,5,61,
        0,0,74,20,1,0,0,0,75,76,5,58,0,0,76,77,5,61,0,0,77,22,1,0,0,0,78,
        79,5,42,0,0,79,24,1,0,0,0,80,81,5,45,0,0,81,26,1,0,0,0,82,83,5,94,
        0,0,83,28,1,0,0,0,84,85,5,10,0,0,85,30,1,0,0,0,86,87,5,116,0,0,87,
        88,5,114,0,0,88,89,5,117,0,0,89,96,5,101,0,0,90,91,5,102,0,0,91,
        92,5,97,0,0,92,93,5,108,0,0,93,94,5,115,0,0,94,96,5,101,0,0,95,86,
        1,0,0,0,95,90,1,0,0,0,96,32,1,0,0,0,97,106,5,48,0,0,98,102,7,0,0,
        0,99,101,7,1,0,0,100,99,1,0,0,0,101,104,1,0,0,0,102,100,1,0,0,0,
        102,103,1,0,0,0,103,106,1,0,0,0,104,102,1,0,0,0,105,97,1,0,0,0,105,
        98,1,0,0,0,106,34,1,0,0,0,107,108,5,117,0,0,108,109,5,110,0,0,109,
        110,5,107,0,0,110,111,5,110,0,0,111,112,5,111,0,0,112,113,5,119,
        0,0,113,114,5,110,0,0,114,36,1,0,0,0,115,119,7,0,0,0,116,118,7,1,
        0,0,117,116,1,0,0,0,118,121,1,0,0,0,119,117,1,0,0,0,119,120,1,0,
        0,0,120,122,1,0,0,0,121,119,1,0,0,0,122,124,5,46,0,0,123,125,7,1,
        0,0,124,123,1,0,0,0,125,126,1,0,0,0,126,124,1,0,0,0,126,127,1,0,
        0,0,127,136,1,0,0,0,128,129,5,48,0,0,129,131,5,46,0,0,130,132,7,
        1,0,0,131,130,1,0,0,0,132,133,1,0,0,0,133,131,1,0,0,0,133,134,1,
        0,0,0,134,136,1,0,0,0,135,115,1,0,0,0,135,128,1,0,0,0,136,38,1,0,
        0,0,137,138,5,114,0,0,138,139,5,101,0,0,139,140,5,99,0,0,140,40,
        1,0,0,0,141,142,5,114,0,0,142,143,5,101,0,0,143,144,5,99,0,0,144,
        145,5,102,0,0,145,146,5,111,0,0,146,147,5,114,0,0,147,148,5,109,
        0,0,148,149,5,97,0,0,149,150,5,116,0,0,150,42,1,0,0,0,151,152,5,
        84,0,0,152,153,5,105,0,0,153,154,5,109,0,0,154,155,5,101,0,0,155,
        44,1,0,0,0,156,157,5,36,0,0,157,158,5,46,0,0,158,159,1,0,0,0,159,
        160,3,33,16,0,160,46,1,0,0,0,161,162,5,73,0,0,162,163,5,100,0,0,
        163,164,5,40,0,0,164,165,5,36,0,0,165,166,5,41,0,0,166,48,1,0,0,
        0,167,169,7,2,0,0,168,167,1,0,0,0,169,170,1,0,0,0,170,168,1,0,0,
        0,170,171,1,0,0,0,171,178,1,0,0,0,172,174,5,32,0,0,173,175,7,2,0,
        0,174,173,1,0,0,0,175,176,1,0,0,0,176,174,1,0,0,0,176,177,1,0,0,
        0,177,179,1,0,0,0,178,172,1,0,0,0,179,180,1,0,0,0,180,178,1,0,0,
        0,180,181,1,0,0,0,181,50,1,0,0,0,182,186,7,3,0,0,183,185,7,4,0,0,
        184,183,1,0,0,0,185,188,1,0,0,0,186,184,1,0,0,0,186,187,1,0,0,0,
        187,52,1,0,0,0,188,186,1,0,0,0,189,191,7,5,0,0,190,189,1,0,0,0,191,
        192,1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,194,1,0,0,0,194,
        195,6,26,0,0,195,54,1,0,0,0,13,0,95,102,105,119,126,133,135,170,
        176,180,186,192,1,6,0,0
    ]

class MagmaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    LANGLE = 1
    RANGLE = 2
    LPAREN = 3
    RPAREN = 4
    LSQUARE = 5
    RSQUARE = 6
    COLON = 7
    COMMA = 8
    PIPE = 9
    EQ = 10
    DEF = 11
    MULT = 12
    MINUS = 13
    EXP = 14
    NEWLINE = 15
    BOOLEAN = 16
    INT = 17
    UNKNOWN = 18
    DECIMAL = 19
    RECORD = 20
    RECORD_FORMAT = 21
    TIME = 22
    GENERATOR = 23
    IDENDITY = 24
    STRING_UQ = 25
    ID = 26
    WS = 27

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'<'", "'>'", "'('", "')'", "'['", "']'", "':'", "','", "'|'", 
            "'='", "':='", "'*'", "'-'", "'^'", "'\\n'", "'unknown'", "'rec'", 
            "'recformat'", "'Time'", "'Id($)'" ]

    symbolicNames = [ "<INVALID>",
            "LANGLE", "RANGLE", "LPAREN", "RPAREN", "LSQUARE", "RSQUARE", 
            "COLON", "COMMA", "PIPE", "EQ", "DEF", "MULT", "MINUS", "EXP", 
            "NEWLINE", "BOOLEAN", "INT", "UNKNOWN", "DECIMAL", "RECORD", 
            "RECORD_FORMAT", "TIME", "GENERATOR", "IDENDITY", "STRING_UQ", 
            "ID", "WS" ]

    ruleNames = [ "LANGLE", "RANGLE", "LPAREN", "RPAREN", "LSQUARE", "RSQUARE", 
                  "COLON", "COMMA", "PIPE", "EQ", "DEF", "MULT", "MINUS", 
                  "EXP", "NEWLINE", "BOOLEAN", "INT", "UNKNOWN", "DECIMAL", 
                  "RECORD", "RECORD_FORMAT", "TIME", "GENERATOR", "IDENDITY", 
                  "STRING_UQ", "ID", "WS" ]

    grammarFileName = "MagmaLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


