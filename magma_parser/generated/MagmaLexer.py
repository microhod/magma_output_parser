# Generated from grammar/MagmaLexer.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,25,185,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,1,1,
        1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,
        1,9,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,1,14,1,14,3,14,90,8,14,1,15,1,15,1,15,5,15,95,
        8,15,10,15,12,15,98,9,15,3,15,100,8,15,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,1,16,1,17,1,17,5,17,112,8,17,10,17,12,17,115,9,17,1,17,
        1,17,4,17,119,8,17,11,17,12,17,120,1,17,1,17,1,17,4,17,126,8,17,
        11,17,12,17,127,3,17,130,8,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,
        1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,
        1,21,1,21,1,21,1,21,1,21,1,22,4,22,158,8,22,11,22,12,22,159,1,22,
        1,22,4,22,164,8,22,11,22,12,22,165,4,22,168,8,22,11,22,12,22,169,
        1,23,1,23,5,23,174,8,23,10,23,12,23,177,9,23,1,24,4,24,180,8,24,
        11,24,12,24,181,1,24,1,24,0,0,25,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
        19,39,20,41,21,43,22,45,23,47,24,49,25,1,0,6,1,0,49,57,1,0,48,57,
        3,0,48,57,65,90,97,122,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,
        95,97,122,3,0,9,9,13,13,32,32,196,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
        0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
        0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
        0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
        0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
        0,0,0,47,1,0,0,0,0,49,1,0,0,0,1,51,1,0,0,0,3,53,1,0,0,0,5,55,1,0,
        0,0,7,57,1,0,0,0,9,59,1,0,0,0,11,61,1,0,0,0,13,63,1,0,0,0,15,65,
        1,0,0,0,17,67,1,0,0,0,19,69,1,0,0,0,21,71,1,0,0,0,23,74,1,0,0,0,
        25,76,1,0,0,0,27,78,1,0,0,0,29,89,1,0,0,0,31,99,1,0,0,0,33,101,1,
        0,0,0,35,129,1,0,0,0,37,131,1,0,0,0,39,135,1,0,0,0,41,145,1,0,0,
        0,43,151,1,0,0,0,45,157,1,0,0,0,47,171,1,0,0,0,49,179,1,0,0,0,51,
        52,5,60,0,0,52,2,1,0,0,0,53,54,5,62,0,0,54,4,1,0,0,0,55,56,5,40,
        0,0,56,6,1,0,0,0,57,58,5,41,0,0,58,8,1,0,0,0,59,60,5,91,0,0,60,10,
        1,0,0,0,61,62,5,93,0,0,62,12,1,0,0,0,63,64,5,58,0,0,64,14,1,0,0,
        0,65,66,5,44,0,0,66,16,1,0,0,0,67,68,5,124,0,0,68,18,1,0,0,0,69,
        70,5,61,0,0,70,20,1,0,0,0,71,72,5,58,0,0,72,73,5,61,0,0,73,22,1,
        0,0,0,74,75,5,42,0,0,75,24,1,0,0,0,76,77,5,94,0,0,77,26,1,0,0,0,
        78,79,5,10,0,0,79,28,1,0,0,0,80,81,5,116,0,0,81,82,5,114,0,0,82,
        83,5,117,0,0,83,90,5,101,0,0,84,85,5,102,0,0,85,86,5,97,0,0,86,87,
        5,108,0,0,87,88,5,115,0,0,88,90,5,101,0,0,89,80,1,0,0,0,89,84,1,
        0,0,0,90,30,1,0,0,0,91,100,5,48,0,0,92,96,7,0,0,0,93,95,7,1,0,0,
        94,93,1,0,0,0,95,98,1,0,0,0,96,94,1,0,0,0,96,97,1,0,0,0,97,100,1,
        0,0,0,98,96,1,0,0,0,99,91,1,0,0,0,99,92,1,0,0,0,100,32,1,0,0,0,101,
        102,5,117,0,0,102,103,5,110,0,0,103,104,5,107,0,0,104,105,5,110,
        0,0,105,106,5,111,0,0,106,107,5,119,0,0,107,108,5,110,0,0,108,34,
        1,0,0,0,109,113,7,0,0,0,110,112,7,1,0,0,111,110,1,0,0,0,112,115,
        1,0,0,0,113,111,1,0,0,0,113,114,1,0,0,0,114,116,1,0,0,0,115,113,
        1,0,0,0,116,118,5,46,0,0,117,119,7,1,0,0,118,117,1,0,0,0,119,120,
        1,0,0,0,120,118,1,0,0,0,120,121,1,0,0,0,121,130,1,0,0,0,122,123,
        5,48,0,0,123,125,5,46,0,0,124,126,7,1,0,0,125,124,1,0,0,0,126,127,
        1,0,0,0,127,125,1,0,0,0,127,128,1,0,0,0,128,130,1,0,0,0,129,109,
        1,0,0,0,129,122,1,0,0,0,130,36,1,0,0,0,131,132,5,114,0,0,132,133,
        5,101,0,0,133,134,5,99,0,0,134,38,1,0,0,0,135,136,5,114,0,0,136,
        137,5,101,0,0,137,138,5,99,0,0,138,139,5,102,0,0,139,140,5,111,0,
        0,140,141,5,114,0,0,141,142,5,109,0,0,142,143,5,97,0,0,143,144,5,
        116,0,0,144,40,1,0,0,0,145,146,5,79,0,0,146,147,5,114,0,0,147,148,
        5,100,0,0,148,149,5,101,0,0,149,150,5,114,0,0,150,42,1,0,0,0,151,
        152,5,84,0,0,152,153,5,105,0,0,153,154,5,109,0,0,154,155,5,101,0,
        0,155,44,1,0,0,0,156,158,7,2,0,0,157,156,1,0,0,0,158,159,1,0,0,0,
        159,157,1,0,0,0,159,160,1,0,0,0,160,167,1,0,0,0,161,163,5,32,0,0,
        162,164,7,2,0,0,163,162,1,0,0,0,164,165,1,0,0,0,165,163,1,0,0,0,
        165,166,1,0,0,0,166,168,1,0,0,0,167,161,1,0,0,0,168,169,1,0,0,0,
        169,167,1,0,0,0,169,170,1,0,0,0,170,46,1,0,0,0,171,175,7,3,0,0,172,
        174,7,4,0,0,173,172,1,0,0,0,174,177,1,0,0,0,175,173,1,0,0,0,175,
        176,1,0,0,0,176,48,1,0,0,0,177,175,1,0,0,0,178,180,7,5,0,0,179,178,
        1,0,0,0,180,181,1,0,0,0,181,179,1,0,0,0,181,182,1,0,0,0,182,183,
        1,0,0,0,183,184,6,24,0,0,184,50,1,0,0,0,13,0,89,96,99,113,120,127,
        129,159,165,169,175,181,1,6,0,0
    ]

class MagmaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    LANGLE = 1
    RANGLE = 2
    LPAREN = 3
    RPAREN = 4
    LSQUARE = 5
    RSQUARE = 6
    COLON = 7
    COMMA = 8
    PIPE = 9
    EQ = 10
    DEF = 11
    MULT = 12
    EXP = 13
    NEWLINE = 14
    BOOLEAN = 15
    INT = 16
    UNKNOWN = 17
    DECIMAL = 18
    RECORD = 19
    RECORD_FORMAT = 20
    ORDER = 21
    TIME = 22
    STRING_UQ = 23
    ID = 24
    WS = 25

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'<'", "'>'", "'('", "')'", "'['", "']'", "':'", "','", "'|'", 
            "'='", "':='", "'*'", "'^'", "'\\n'", "'unknown'", "'rec'", 
            "'recformat'", "'Order'", "'Time'" ]

    symbolicNames = [ "<INVALID>",
            "LANGLE", "RANGLE", "LPAREN", "RPAREN", "LSQUARE", "RSQUARE", 
            "COLON", "COMMA", "PIPE", "EQ", "DEF", "MULT", "EXP", "NEWLINE", 
            "BOOLEAN", "INT", "UNKNOWN", "DECIMAL", "RECORD", "RECORD_FORMAT", 
            "ORDER", "TIME", "STRING_UQ", "ID", "WS" ]

    ruleNames = [ "LANGLE", "RANGLE", "LPAREN", "RPAREN", "LSQUARE", "RSQUARE", 
                  "COLON", "COMMA", "PIPE", "EQ", "DEF", "MULT", "EXP", 
                  "NEWLINE", "BOOLEAN", "INT", "UNKNOWN", "DECIMAL", "RECORD", 
                  "RECORD_FORMAT", "ORDER", "TIME", "STRING_UQ", "ID", "WS" ]

    grammarFileName = "MagmaLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


